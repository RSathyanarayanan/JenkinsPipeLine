package apiScenarios;

import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONObject;

import baseClass.BaseClass;
import iSAFE.ApplicationKeywordsAPI;
import io.restassured.response.Response;

public class TeleConsultAPI extends ApplicationKeywordsAPI {
	BaseClass obj;

	public TeleConsultAPI(BaseClass obj) {
		super(obj);
		this.obj = obj;
	}

	public void getChatsByPatientId() {
		try {
			testStepPassed("Test Case Name: " + currentTestCaseName);// Test Case Info
			testStepPassed("API Method Name: " + retrieve("API Method Name"));
			testStepPassed("Data Row Name: " + retrieve("Data Row Name"));
			testStepInfo(""); // to give a line spacing in the output file

			String dateTimeFormat = "ddMMMyyyyhhmmssSSa"; // 14Nov201810455720AM
			String currentDateTime = returnFormattedDate("Today", dateTimeFormat);// Dynamic Values // The 'RRN' value
																					// in the 'Clear JSON' would be
																					// uniquely generated by adding the

			// retrieving saveAuditCall Datas
			String getChatsByPatientIdURI = retrieve("getChatsByPatientId URI");
			String getChatsByPatientIdHeader = retrieve("getChatsByPatientId Header");
			String expectedValues = retrieve("Expected Values In Response Body");

			ArrayList<String> inputParameterHeadersArray = new ArrayList<>();

			// Saving the input parameters to a file
			testStepInfo("About to save the Input Parameters of the method to a file");

			// Creating input parameters file
			String inputParametersFolder = suiteResultsDir + "/Input";
			createInputParametersFolder(inputParametersFolder);

			inputParameterHeadersArray.add("Input Parameters:");
			inputParameterHeadersArray.add("URI: " + getChatsByPatientIdURI);
			inputParameterHeadersArray.add("Header" + getChatsByPatientIdHeader);

			// Creating Input Folder to add Input Datas and Encrypted JSON
			String inputParametersFileName = suiteResultsDir + "/Input/" + currentTestCaseName + "_Params_"
					+ currentDateTime + ".txt";
			saveInputParametersToFile(inputParametersFileName, inputParameterHeadersArray);

			// Creating link in the report to access the input data text file
			String inputParametersFileNameRelativePath = "../Input/" + currentTestCaseName + "_Params_"
					+ currentDateTime + ".txt";
			testStepLink(inputParametersFileNameRelativePath, "Click to open input parameters of the method getChatsByPatientId");
			testStepInfo("");

			// Execution of API Command
			testStepInfo("About to execute the 'API' command");
			executeGetAPIMethod(getChatsByPatientIdURI, null, getChatsByPatientIdHeader);
			testStepInfo("");

			// Verifying the response expected vs actual
			String responseBody = response.getBody().asString();
			testStepInfo("Successfully got the response ");
			validateKeyInJSONArray(responseBody, expectedValues);

			// Creating output Responses Folder to add the 'Output Responses' to a file
			testStepInfo("About to save the Output Responses to a file");
			String outputResponsesFileName = suiteResultsDir + "/Responses/" + currentTestCaseName + "_Responses_"
					+ currentDateTime + ".txt";
			saveOutputResponsesToFile(outputResponsesFileName, responseBody);

			// Linking it to the test result
			String outputResponsesFileNameRelativePath = "../Responses/" + currentTestCaseName + "_Responses_"
					+ currentDateTime + ".txt";
			testStepLink(outputResponsesFileNameRelativePath, "Click to open output responses of the method getChatsByPatientId");
			testStepInfo(""); // to give a line spacing in the output file
		} catch (Exception e) // In case of exception in the test step, printing the exception message as a
								// failure in the report
		{
			stepFailed("Exception in test case - '" + e.getClass().getName() + "'");
			testStepInfo(""); // one line spacing
			testStepInfo("About to write 'Exception' for certain values in the Test Report Summary");
			testStepInfo(""); // to give a line spacing in the output file
		} finally {
			if (this.testFailure) {
				testFailure = true;
			}
		}
	}

	public void getChatsByDoctorId() {
		try {
			testStepPassed("Test Case Name: " + currentTestCaseName);// Test Case Info
			testStepPassed("API Method Name: " + retrieve("API Method Name"));
			testStepPassed("Data Row Name: " + retrieve("Data Row Name"));
			testStepInfo(""); // to give a line spacing in the output file

			String dateTimeFormat = "ddMMMyyyyhhmmssSSa"; // 14Nov201810455720AM
			String currentDateTime = returnFormattedDate("Today", dateTimeFormat);// Dynamic Values // The 'RRN' value
																					// in the 'Clear JSON' would be
																					// uniquely generated by adding the

			// retrieving saveAuditCall Datas
			String getChatsByDoctorIdURI = retrieve("getChatsByDoctorId URI");
			String getChatsByDoctorIdHeader = retrieve("getChatsByDoctorId Header");
			String expectedValues = retrieve("Expected Values In Response Body");

			ArrayList<String> inputParameterHeadersArray = new ArrayList<>();

			// Saving the input parameters to a file
			testStepInfo("About to save the Input Parameters of the method to a file");

			// Creating input parameters file
			String inputParametersFolder = suiteResultsDir + "/Input";
			createInputParametersFolder(inputParametersFolder);

			inputParameterHeadersArray.add("Input Parameters:");
			inputParameterHeadersArray.add("URI: " + getChatsByDoctorIdURI);
			inputParameterHeadersArray.add("Header" + getChatsByDoctorIdHeader);

			// Creating Input Folder to add Input Datas and Encrypted JSON
			String inputParametersFileName = suiteResultsDir + "/Input/" + currentTestCaseName + "_Params_"
					+ currentDateTime + ".txt";
			saveInputParametersToFile(inputParametersFileName, inputParameterHeadersArray);

			// Creating link in the report to access the input data text file
			String inputParametersFileNameRelativePath = "../Input/" + currentTestCaseName + "_Params_"
					+ currentDateTime + ".txt";
			testStepLink(inputParametersFileNameRelativePath, "Click to open input parameters of the method getChatsByDoctorId");
			testStepInfo("");

			// Execution of API Command
			testStepInfo("About to execute the 'API' command");
			executeGetAPIMethod(getChatsByDoctorIdURI, null, getChatsByDoctorIdHeader);
			testStepInfo("");

			// Verifying the response expected vs actual
			String responseBody = response.getBody().asString();
			testStepInfo("Successfully got the response ");
			JSONObject jsonObject = new JSONObject(responseBody);
			verifyResponse(jsonObject, expectedValues);

			// Creating output Responses Folder to add the 'Output Responses' to a file
			testStepInfo("About to save the Output Responses to a file");
			String outputResponsesFileName = suiteResultsDir + "/Responses/" + currentTestCaseName + "_Responses_"
					+ currentDateTime + ".txt";
			saveOutputResponsesToFile(outputResponsesFileName, responseBody);

			// Linking it to the test result
			String outputResponsesFileNameRelativePath = "../Responses/" + currentTestCaseName + "_Responses_"
					+ currentDateTime + ".txt";
			testStepLink(outputResponsesFileNameRelativePath, "Click to open output responses of the method getChatsByDoctorId");
			testStepInfo(""); // to give a line spacing in the output file
		} catch (Exception e) // In case of exception in the test step, printing the exception message as a
								// failure in the report
		{
			stepFailed("Exception in test case - '" + e.getClass().getName() + "'");
			testStepInfo(""); // one line spacing
			testStepInfo("About to write 'Exception' for certain values in the Test Report Summary");
			testStepInfo(""); // to give a line spacing in the output file
		} finally {
			if (this.testFailure) {
				testFailure = true;
			}
		}
	}
}