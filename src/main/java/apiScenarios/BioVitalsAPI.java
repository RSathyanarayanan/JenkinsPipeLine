package apiScenarios;

import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONObject;

import baseClass.BaseClass;
import iSAFE.ApplicationKeywordsAPI;
import io.restassured.response.Response;

public class BioVitalsAPI  extends ApplicationKeywordsAPI {
	BaseClass obj;

	public BioVitalsAPI(BaseClass obj) {
		super(obj);
		this.obj = obj;
	}
	
	
	
	public void addBioVitalHeight()
	{
		try
		{
			testStepPassed("Test Case Name: " + currentTestCaseName);// Test Case Info
			testStepPassed("API Method Name: " + retrieve("API Method Name"));
			testStepPassed("Data Row Name: " + retrieve("Data Row Name"));
			testStepInfo(""); // to give a line spacing in the output file

			String dateTimeFormat = "ddMMMyyyyhhmmssSSa"; // 14Nov201810455720AM
			String currentDateTime = returnFormattedDate("Today", dateTimeFormat);// Dynamic Values // The 'RRN' value in the 'Clear JSON' would be uniquely generated by adding the

			//retrieving saveAuditCall Datas
			String addBioVitalHeightURI = retrieve("addBioVitalHeight URI");
			String addBioVitalHeightHeader = retrieve("addBioVitalHeight Header");
			String addBioVitalHeightBody = retrieve("addBioVitalHeight Body");
			String expectedValues = retrieve("Expected Values In Response Body");

			ArrayList<String> inputParameterHeadersArray = new ArrayList<>();

			//Saving the input parameters to a file
			testStepInfo("About to save the Input Parameters of the method to a file");

			// Creating input parameters file
			String inputParametersFolder = suiteResultsDir + "/Input";
			createInputParametersFolder(inputParametersFolder);

			inputParameterHeadersArray.add("Input Parameters:");
			inputParameterHeadersArray.add("URI: " + addBioVitalHeightURI);
			inputParameterHeadersArray.add("Header" + addBioVitalHeightHeader);
			inputParameterHeadersArray.add("Body" + addBioVitalHeightBody);

		
			//Creating Input Folder to add Input Datas and Encrypted JSON
			String inputParametersFileName = suiteResultsDir + "/Input/" + currentTestCaseName + "_Params_" + currentDateTime + ".txt";
			saveInputParametersToFile(inputParametersFileName, inputParameterHeadersArray);

			//Creating link in the report to access the input data text file
			String inputParametersFileNameRelativePath = "../Input/" + currentTestCaseName + "_Params_"+ currentDateTime + ".txt";
			testStepLink(inputParametersFileNameRelativePath, "Click to open input parameters of the method addBioVitalHeight");
			testStepInfo("");

			//Execution of API Command
			testStepInfo("About to execute the 'API' command");
			executeAPIMethod(addBioVitalHeightURI, null, addBioVitalHeightHeader,addBioVitalHeightBody);
			//executeGetAPIMethod(URI,Parameters,Header(AuthKey,Token));

			testStepInfo("");

			//Verifying the response expected vs actual
			String responseBody = response.getBody().asString();
			testStepInfo("Successfully got the response ");
			
			JSONObject jsonObject = new JSONObject(responseBody);
			verifyResponse(jsonObject, expectedValues);
			
			// Creating output Responses Folder to add the 'Output Responses' to a file
			testStepInfo("About to save the Output Responses to a file");
			String outputResponsesFileName = suiteResultsDir + "/Responses/" + currentTestCaseName + "_Responses_"+ currentDateTime + ".txt";
			saveOutputResponsesToFile(outputResponsesFileName, responseBody);

			//Linking it to the test result
			String outputResponsesFileNameRelativePath = "../Responses/" + currentTestCaseName + "_Responses_"
					+ currentDateTime + ".txt";
			testStepLink(outputResponsesFileNameRelativePath, "Click to open output responses of the method addBioVitalHeight");
			testStepInfo(""); // to give a line spacing in the output file
		}
		catch (Exception e) // In case of exception in the test step, printing the exception message as a failure in the report
		{
			stepFailed("Exception in test case - '" + e.getClass().getName() + "'");
			testStepInfo(""); // one line spacing
			testStepInfo("About to write 'Exception' for certain values in the Test Report Summary");
			testStepInfo(""); // to give a line spacing in the output file
		}
		finally
		{
			if (this.testFailure)
			{
				testFailure = true;
			}
		}
	}
	
	

	public void addBioVitalWeight()
	{
		try
		{
			testStepPassed("Test Case Name: " + currentTestCaseName);// Test Case Info
			testStepPassed("API Method Name: " + retrieve("API Method Name"));
			testStepPassed("Data Row Name: " + retrieve("Data Row Name"));
			testStepInfo(""); // to give a line spacing in the output file

			String dateTimeFormat = "ddMMMyyyyhhmmssSSa"; // 14Nov201810455720AM
			String currentDateTime = returnFormattedDate("Today", dateTimeFormat);// Dynamic Values // The 'RRN' value in the 'Clear JSON' would be uniquely generated by adding the

			//retrieving saveAuditCall Datas
			String addBioVitalWeightURI = retrieve("addBioVitalWeight URI");
			String addBioVitalWeightHeader = retrieve("addBioVitalWeight Header");
			String addBioVitalWeightBody = retrieve("addBioVitalWeight Body");
			String expectedValues = retrieve("Expected Values In Response Body");

			ArrayList<String> inputParameterHeadersArray = new ArrayList<>();

			//Saving the input parameters to a file
			testStepInfo("About to save the Input Parameters of the method to a file");

			// Creating input parameters file
			String inputParametersFolder = suiteResultsDir + "/Input";
			createInputParametersFolder(inputParametersFolder);

			inputParameterHeadersArray.add("Input Parameters:");
			inputParameterHeadersArray.add("URI: " + addBioVitalWeightURI);
			inputParameterHeadersArray.add("Header" + addBioVitalWeightHeader);
			inputParameterHeadersArray.add("Body" + addBioVitalWeightBody);

		
			//Creating Input Folder to add Input Datas and Encrypted JSON
			String inputParametersFileName = suiteResultsDir + "/Input/" + currentTestCaseName + "_Params_" + currentDateTime + ".txt";
			saveInputParametersToFile(inputParametersFileName, inputParameterHeadersArray);

			//Creating link in the report to access the input data text file
			String inputParametersFileNameRelativePath = "../Input/" + currentTestCaseName + "_Params_"+ currentDateTime + ".txt";
			testStepLink(inputParametersFileNameRelativePath, "Click to open input parameters of the method addBioVitalWeight");
			testStepInfo("");

			//Execution of API Command
			testStepInfo("About to execute the 'API' command");
			executeAPIMethod(addBioVitalWeightURI, null, addBioVitalWeightHeader,addBioVitalWeightBody);
			//executeGetAPIMethod(URI,Parameters,Header(AuthKey,Token));

			testStepInfo("");

			//Verifying the response expected vs actual
			String responseBody = response.getBody().asString();
			testStepInfo("Successfully got the response ");
			
			JSONObject jsonObject = new JSONObject(responseBody);
			verifyResponse(jsonObject, expectedValues);
			
			// Creating output Responses Folder to add the 'Output Responses' to a file
			testStepInfo("About to save the Output Responses to a file");
			String outputResponsesFileName = suiteResultsDir + "/Responses/" + currentTestCaseName + "_Responses_"+ currentDateTime + ".txt";
			saveOutputResponsesToFile(outputResponsesFileName, responseBody);

			//Linking it to the test result
			String outputResponsesFileNameRelativePath = "../Responses/" + currentTestCaseName + "_Responses_"
					+ currentDateTime + ".txt";
			testStepLink(outputResponsesFileNameRelativePath, "Click to open output responses of the method addBioVitalWeight");
			testStepInfo(""); // to give a line spacing in the output file
		}
		catch (Exception e) // In case of exception in the test step, printing the exception message as a failure in the report
		{
			stepFailed("Exception in test case - '" + e.getClass().getName() + "'");
			testStepInfo(""); // one line spacing
			testStepInfo("About to write 'Exception' for certain values in the Test Report Summary");
			testStepInfo(""); // to give a line spacing in the output file
		}
		finally
		{
			if (this.testFailure)
			{
				testFailure = true;
			}
		}
	}
	

	public void addBioVitalOxygenLevel()
	{
		try
		{
			testStepPassed("Test Case Name: " + currentTestCaseName);// Test Case Info
			testStepPassed("API Method Name: " + retrieve("API Method Name"));
			testStepPassed("Data Row Name: " + retrieve("Data Row Name"));
			testStepInfo(""); // to give a line spacing in the output file

			String dateTimeFormat = "ddMMMyyyyhhmmssSSa"; // 14Nov201810455720AM
			String currentDateTime = returnFormattedDate("Today", dateTimeFormat);// Dynamic Values // The 'RRN' value in the 'Clear JSON' would be uniquely generated by adding the

			//retrieving saveAuditCall Datas
			String addBioVitalOxygenLevelURI = retrieve("addBioVitalOxygenLevel URI");
			String addBioVitalOxygenLevelHeader = retrieve("addBioVitalOxygenLevel Header");
			String addBioVitalOxygenLevelBody = retrieve("addBioVitalOxygenLevel Body");
			String expectedValues = retrieve("Expected Values In Response Body");

			ArrayList<String> inputParameterHeadersArray = new ArrayList<>();

			//Saving the input parameters to a file
			testStepInfo("About to save the Input Parameters of the method to a file");

			// Creating input parameters file
			String inputParametersFolder = suiteResultsDir + "/Input";
			createInputParametersFolder(inputParametersFolder);

			inputParameterHeadersArray.add("Input Parameters:");
			inputParameterHeadersArray.add("URI: " + addBioVitalOxygenLevelURI);
			inputParameterHeadersArray.add("Header" + addBioVitalOxygenLevelHeader);
			inputParameterHeadersArray.add("Body" + addBioVitalOxygenLevelBody);

		
			//Creating Input Folder to add Input Datas and Encrypted JSON
			String inputParametersFileName = suiteResultsDir + "/Input/" + currentTestCaseName + "_Params_" + currentDateTime + ".txt";
			saveInputParametersToFile(inputParametersFileName, inputParameterHeadersArray);

			//Creating link in the report to access the input data text file
			String inputParametersFileNameRelativePath = "../Input/" + currentTestCaseName + "_Params_"+ currentDateTime + ".txt";
			testStepLink(inputParametersFileNameRelativePath, "Click to open input parameters of the method addBioVitalOxygenLevel");
			testStepInfo("");

			//Execution of API Command
			testStepInfo("About to execute the 'API' command");
			executeAPIMethod(addBioVitalOxygenLevelURI, null, addBioVitalOxygenLevelHeader,addBioVitalOxygenLevelBody);
			//executeGetAPIMethod(URI,Parameters,Header(AuthKey,Token));

			testStepInfo("");

			//Verifying the response expected vs actual
			String responseBody = response.getBody().asString();
			testStepInfo("Successfully got the response ");
			
			JSONObject jsonObject = new JSONObject(responseBody);
			verifyResponse(jsonObject, expectedValues);
			
			// Creating output Responses Folder to add the 'Output Responses' to a file
			testStepInfo("About to save the Output Responses to a file");
			String outputResponsesFileName = suiteResultsDir + "/Responses/" + currentTestCaseName + "_Responses_"+ currentDateTime + ".txt";
			saveOutputResponsesToFile(outputResponsesFileName, responseBody);

			//Linking it to the test result
			String outputResponsesFileNameRelativePath = "../Responses/" + currentTestCaseName + "_Responses_"
					+ currentDateTime + ".txt";
			testStepLink(outputResponsesFileNameRelativePath, "Click to open output responses of the method addBioVitalOxygenLevel");
			testStepInfo(""); // to give a line spacing in the output file
		}
		catch (Exception e) // In case of exception in the test step, printing the exception message as a failure in the report
		{
			stepFailed("Exception in test case - '" + e.getClass().getName() + "'");
			testStepInfo(""); // one line spacing
			testStepInfo("About to write 'Exception' for certain values in the Test Report Summary");
			testStepInfo(""); // to give a line spacing in the output file
		}
		finally
		{
			if (this.testFailure)
			{
				testFailure = true;
			}
		}
	}
	

	public void addBioVitalHeartRate()
	{
		try
		{
			testStepPassed("Test Case Name: " + currentTestCaseName);// Test Case Info
			testStepPassed("API Method Name: " + retrieve("API Method Name"));
			testStepPassed("Data Row Name: " + retrieve("Data Row Name"));
			testStepInfo(""); // to give a line spacing in the output file

			String dateTimeFormat = "ddMMMyyyyhhmmssSSa"; // 14Nov201810455720AM
			String currentDateTime = returnFormattedDate("Today", dateTimeFormat);// Dynamic Values // The 'RRN' value in the 'Clear JSON' would be uniquely generated by adding the

			//retrieving saveAuditCall Datas
			String addBioVitalHeartRateURI = retrieve("addBioVitalHeartRate URI");
			String addBioVitalHeartRateHeader = retrieve("addBioVitalHeartRate Header");
			String addBioVitalHeartRateBody = retrieve("addBioVitalHeartRate Body");
			String expectedValues = retrieve("Expected Values In Response Body");

			ArrayList<String> inputParameterHeadersArray = new ArrayList<>();

			//Saving the input parameters to a file
			testStepInfo("About to save the Input Parameters of the method to a file");

			// Creating input parameters file
			String inputParametersFolder = suiteResultsDir + "/Input";
			createInputParametersFolder(inputParametersFolder);

			inputParameterHeadersArray.add("Input Parameters:");
			inputParameterHeadersArray.add("URI: " + addBioVitalHeartRateURI);
			inputParameterHeadersArray.add("Header" + addBioVitalHeartRateHeader);
			inputParameterHeadersArray.add("Body" + addBioVitalHeartRateBody);

		
			//Creating Input Folder to add Input Datas and Encrypted JSON
			String inputParametersFileName = suiteResultsDir + "/Input/" + currentTestCaseName + "_Params_" + currentDateTime + ".txt";
			saveInputParametersToFile(inputParametersFileName, inputParameterHeadersArray);

			//Creating link in the report to access the input data text file
			String inputParametersFileNameRelativePath = "../Input/" + currentTestCaseName + "_Params_"+ currentDateTime + ".txt";
			testStepLink(inputParametersFileNameRelativePath, "Click to open input parameters of the method addBioVitalHeartRate");
			testStepInfo("");

			//Execution of API Command
			testStepInfo("About to execute the 'API' command");
			executeAPIMethod(addBioVitalHeartRateURI, null, addBioVitalHeartRateHeader,addBioVitalHeartRateBody);

			testStepInfo("");

			//Verifying the response expected vs actual
			String responseBody = response.getBody().asString();
			testStepInfo("Successfully got the response ");
			
			JSONObject jsonObject = new JSONObject(responseBody);
			verifyResponse(jsonObject, expectedValues);
			
			// Creating output Responses Folder to add the 'Output Responses' to a file
			testStepInfo("About to save the Output Responses to a file");
			String outputResponsesFileName = suiteResultsDir + "/Responses/" + currentTestCaseName + "_Responses_"+ currentDateTime + ".txt";
			saveOutputResponsesToFile(outputResponsesFileName, responseBody);

			//Linking it to the test result
			String outputResponsesFileNameRelativePath = "../Responses/" + currentTestCaseName + "_Responses_"
					+ currentDateTime + ".txt";
			testStepLink(outputResponsesFileNameRelativePath, "Click to open output responses of the method addBioVitalHeartRate");
			testStepInfo(""); // to give a line spacing in the output file
		}
		catch (Exception e) // In case of exception in the test step, printing the exception message as a failure in the report
		{
			stepFailed("Exception in test case - '" + e.getClass().getName() + "'");
			testStepInfo(""); // one line spacing
			testStepInfo("About to write 'Exception' for certain values in the Test Report Summary");
			testStepInfo(""); // to give a line spacing in the output file
		}
		finally
		{
			if (this.testFailure)
			{
				testFailure = true;
			}
		}
	}
	

	public void addBioVitalBloodPressure()
	{
		try
		{
			testStepPassed("Test Case Name: " + currentTestCaseName);// Test Case Info
			testStepPassed("API Method Name: " + retrieve("API Method Name"));
			testStepPassed("Data Row Name: " + retrieve("Data Row Name"));
			testStepInfo(""); // to give a line spacing in the output file

			String dateTimeFormat = "ddMMMyyyyhhmmssSSa"; // 14Nov201810455720AM
			String currentDateTime = returnFormattedDate("Today", dateTimeFormat);// Dynamic Values // The 'RRN' value in the 'Clear JSON' would be uniquely generated by adding the

			//retrieving saveAuditCall Datas
			String addBioVitalBloodPressureURI = retrieve("addBioVitalBloodPressure URI");
			String addBioVitalBloodPressureHeader = retrieve("addBioVitalBloodPressure Header");
			String addBioVitalBloodPressureBody = retrieve("addBioVitalBloodPressure Body");
			String expectedValues = retrieve("Expected Values In Response Body");

			ArrayList<String> inputParameterHeadersArray = new ArrayList<>();

			//Saving the input parameters to a file
			testStepInfo("About to save the Input Parameters of the method to a file");

			// Creating input parameters file
			String inputParametersFolder = suiteResultsDir + "/Input";
			createInputParametersFolder(inputParametersFolder);

			inputParameterHeadersArray.add("Input Parameters:");
			inputParameterHeadersArray.add("URI: " + addBioVitalBloodPressureURI);
			inputParameterHeadersArray.add("Header" + addBioVitalBloodPressureHeader);
			inputParameterHeadersArray.add("Body" + addBioVitalBloodPressureBody);

		
			//Creating Input Folder to add Input Datas and Encrypted JSON
			String inputParametersFileName = suiteResultsDir + "/Input/" + currentTestCaseName + "_Params_" + currentDateTime + ".txt";
			saveInputParametersToFile(inputParametersFileName, inputParameterHeadersArray);

			//Creating link in the report to access the input data text file
			String inputParametersFileNameRelativePath = "../Input/" + currentTestCaseName + "_Params_"+ currentDateTime + ".txt";
			testStepLink(inputParametersFileNameRelativePath, "Click to open input parameters of the method addBioVitalBloodPressure");
			testStepInfo("");

			//Execution of API Command
			testStepInfo("About to execute the 'API' command");
			executeAPIMethod(addBioVitalBloodPressureURI, null, addBioVitalBloodPressureHeader,addBioVitalBloodPressureBody);
			//executeGetAPIMethod(URI,Parameters,Header(AuthKey,Token));

			testStepInfo("");

			//Verifying the response expected vs actual
			String responseBody = response.getBody().asString();
			testStepInfo("Successfully got the response ");
			
			JSONObject jsonObject = new JSONObject(responseBody);
			verifyResponse(jsonObject, expectedValues);
			
			// Creating output Responses Folder to add the 'Output Responses' to a file
			testStepInfo("About to save the Output Responses to a file");
			String outputResponsesFileName = suiteResultsDir + "/Responses/" + currentTestCaseName + "_Responses_"+ currentDateTime + ".txt";
			saveOutputResponsesToFile(outputResponsesFileName, responseBody);

			//Linking it to the test result
			String outputResponsesFileNameRelativePath = "../Responses/" + currentTestCaseName + "_Responses_"
					+ currentDateTime + ".txt";
			testStepLink(outputResponsesFileNameRelativePath, "Click to open output responses of the method addBioVitalBloodPressure");
			testStepInfo(""); // to give a line spacing in the output file
		}
		catch (Exception e) // In case of exception in the test step, printing the exception message as a failure in the report
		{
			stepFailed("Exception in test case - '" + e.getClass().getName() + "'");
			testStepInfo(""); // one line spacing
			testStepInfo("About to write 'Exception' for certain values in the Test Report Summary");
			testStepInfo(""); // to give a line spacing in the output file
		}
		finally
		{
			if (this.testFailure)
			{
				testFailure = true;
			}
		}
	}
	
	
}